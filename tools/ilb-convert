#!/usr/bin/env perl
# vim:syntax=perl:

=head1 NAME

ilb-convert - InterLinear Bible converter

=head1 SYNOPSIS

B<< ilb-convert < >>input.csv B<< > >>book.json

B<< ilb-convert -d=';' < >>input.csv B<< > >>book.json

=head1 DESCRIPTION

For more information visit L<https://github.com/sirjofri/ilb> and read
the Readme.

=cut

use Text::CSV;

my $template_head = qq({
	"short_name": "__short_name__",
	"name": "__name__",
	"direction": "left or right",
	"languages": [
		);

my $template_mid = qq(
	],
	"content": [
		);

my $template_foot = qq(
	]
});

my $delimiter = ',';
my @languages;
my $num;
my @contents;

foreach my $arg (@ARGV) {
	my $delimstr = $arg if $arg =~ /-d=.*/ or next;
	$delimstr =~ /-d=(?<delim>.*)/;
	$delimiter = $+{delim};
}

my $csv = Text::CSV->new({
	binary => 1,
	sep_char => $delimiter,
});

while(<>) {
	chomp;
	$csv->parse($_) or die "No valid input: $_";
	my @fields = $csv->fields();
	$num = $#fields;
	my @encapsulated;
	foreach my $f (@fields) {
		push @encapsulated, qq("$f");
	}
	my $str = join ", ", @encapsulated;
	push @contents, $str;
}

foreach $i (0..$num) {
	my $id = $i+1;
	$languages[$i] = qq("language$id");
}

print $template_head;
my $lstr = join ",\n\t\t", @languages;
print $lstr;
print $template_mid;
my $cstr = join ",\n\t\t", @contents;
print $cstr;
print $template_foot;
